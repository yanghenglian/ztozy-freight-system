spring:
  application:
    name: freight-provider # 应用名

  profiles:
    active: dev

log:
  level:
    root: info   #主日志级别
    com.zto56.freight: debug   #该项目日志级别，当需要打印sql时请开启为debug
  path: logs/${spring.application.name}  #日志存放地址

logging:
  level:
    com.zto56.freight: debug

##上面是基础配置，不用上配置中心
##下面是环境区分
---
# local环境
spring:
  profiles: local
  cloud:
    nacos:
      # Nacos注册中心
      discovery:
        server-addr: 127.0.0.1:8848
        username: nacos
        password: nacos
        namespace: ca9e32cf-3414-4f7b-8a93-6139d930bedc

      # Nacos配置中心
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr}
        username: ${spring.cloud.nacos.discovery.username}
        password: ${spring.cloud.nacos.discovery.password}
        namespace: 8cfced7a-4f17-4525-a6a7-9f501799457c
        group: ${spring.application.name}-group
        prefix: ${spring.application.name}
        file-extension: yaml
        # 配置拆分,dataId创建的时候一定要加.yaml,不然读不到配置
        extension-configs:
          - data-id: ${spring.application.name}-database.yaml
            group: ${spring.application.name}-group
            refresh: true

          - data-id: ${spring.application.name}-custom.yaml
            group: ${spring.application.name}-group
            refresh: true

        # 用于共享的配置文件
        shared-configs:
          - data-id: common-redis.yaml
            group: common-configuration-group
            refresh: true
          - data-id: common-mq.yaml
            group: common-configuration-group
            refresh: true

dubbo:
  protocol: #Dubbo 服务暴露的协议配置，其中子属性 name 为协议名称，port 为协议端口（ -1 表示自增端口，从 20880 开始）
    name: dubbo
    port: -1  #dubbo协议缺省端口为20880，rmi协议缺省端口为1099，http和hessian协议缺省端口为80；如果没有配置port，则自动采用默认端口，如果配置为-1，则会分配一个没有被占用的端口。Dubbo 2.4.0+，分配的端口在协议缺省端口的基础上增长，确保端口段可控
  registry:
    #dubbo服务注册端口，注册中心服务器地址，如果地址没有端口缺省为9090，同一集群内的多个地址用逗号分隔，如：ip:port,ip:port
    #其中前缀spring-cloud说明：挂载到 Spring Cloud注册中心
    address: nacos://${spring.cloud.nacos.discovery.server-addr}
    protocol: dubbo
    check: false  #关闭注册中心是否启动的相关检查,false表示不检查注册中心是否启动，就不会报错
    parameters:
      namespace: ${spring.cloud.nacos.discovery.namespace} # 这个很重要不能漏

  consumer:
    check: false  #关闭订阅服务是否启动的检查【检查时，没有服务提供者会报错】
    filter: dubboCustomFilter
  provider:
    filter: dubboCustomFilter


---
# dev环境
spring:
  profiles: dev
  cloud:
    nacos:
      # Nacos注册中心
      discovery:
        server-addr: 10.15.30.80:8848,10.15.30.82:8848
        username: nacos
        password: ztky@nacos
        namespace: ca9e32cf-3414-4f7b-8a93-6139d930bedc

      # Nacos配置中心
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr}
        username: ${spring.cloud.nacos.discovery.username}
        password: ${spring.cloud.nacos.discovery.password}
        namespace: 50a179ff-0448-4ad8-99bb-a22c02f4f4b1
        group: ${spring.application.name}-group
        prefix: ${spring.application.name}
        file-extension: yaml
        # 配置拆分,dataId创建的时候一定要加.yaml,不然读不到配置
        extension-configs:
          - data-id: ${spring.application.name}-database.yaml
            group: ${spring.application.name}-group
            refresh: true

          - data-id: ${spring.application.name}-custom.yaml
            group: ${spring.application.name}-group
            refresh: true

        # 用于共享的配置文件
        shared-configs:
          - data-id: common-redis.yaml
            group: common-configuration-group
            refresh: true
          - data-id: common-mq.yaml
            group: common-configuration-group
            refresh: true

dubbo:
  protocol: #Dubbo 服务暴露的协议配置，其中子属性 name 为协议名称，port 为协议端口（ -1 表示自增端口，从 20880 开始）
    name: dubbo
    port: -1  #dubbo协议缺省端口为20880，rmi协议缺省端口为1099，http和hessian协议缺省端口为80；如果没有配置port，则自动采用默认端口，如果配置为-1，则会分配一个没有被占用的端口。Dubbo 2.4.0+，分配的端口在协议缺省端口的基础上增长，确保端口段可控
  registry:
    #dubbo服务注册端口，注册中心服务器地址，如果地址没有端口缺省为9090，同一集群内的多个地址用逗号分隔，如：ip:port,ip:port
    #其中前缀spring-cloud说明：挂载到 Spring Cloud注册中心
    address: nacos://${spring.cloud.nacos.discovery.server-addr}
    protocol: dubbo
    check: false  #关闭注册中心是否启动的相关检查,false表示不检查注册中心是否启动，就不会报错
    parameters:
      namespace: ${spring.cloud.nacos.discovery.namespace} # 这个很重要不能漏

  consumer:
    check: false  #关闭订阅服务是否启动的检查【检查时，没有服务提供者会报错】
    filter: dubboCustomFilter
  provider:
    filter: dubboCustomFilter

